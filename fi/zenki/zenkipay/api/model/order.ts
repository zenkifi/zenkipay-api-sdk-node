/**
 * Zenkipay API
 * Definition of technical specification of the product; Zenkipay is a gateway cryptocurrency payment system that allows merchant\'s to receive payments on their e-commerce portals. Unlike other platforms, Zenkipay ensures customer satisfaction through its payment process. guarantee deposit (delivered product and expected quality) to settle payment to the merchant, thus avoiding the loss of client assets due to online scams.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@zenki.fi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { Breakdown } from './breakdown';
import { Item } from './item';
import { OrderClaim } from './orderClaim';
import { OrderDispute } from './orderDispute';
import { OrderLinks } from './orderLinks';
import { OrderPaymentInfo } from './orderPaymentInfo';
import { OrderSettlementInfo } from './orderSettlementInfo';
import { Shopper } from './shopper';

/**
* Object that represents the detailed information of an order.
*/
export class Order {
    /**
    * Data model version, its current value should be v1.0.0.
    */
    'version': string;
    /**
    * Unique order identifier generated by Zenkipay.
    */
    'zenkiOrderId': string;
    /**
    * Unique order identifier generated by the merchant.
    */
    'orderId'?: string;
    /**
    * Unique identifier of the shopping cart that allows identifying the purchase of one or more products or services.
    */
    'cartId'?: string;
    /**
    * Indicates the model for the product delivery or service delivery.  Possible values: * WITH_CARRIER    - If a courier is going to be used for the shipment and delivery of the product or service. * WITHOUT_CARRIER - If a courier is not going to be used for the shipment and delivery of the product or service. * MIXED           - If a courier is going to be used to send part of the products or services and another part is delivered without using a courier.
    */
    'type': Order.TypeEnum;
    /**
    * Unique identifier of the country, the definition of the ISO_3166-1 standard is used with 2 characters, see: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 or https://www.iso.org/iso-3166-country-codes.html
    */
    'countryCodeIso2': string;
    /**
    * Order Status  Possible values: * PENDING                   - Waiting for the buyer to pay the payment order. * READY4PAY                 - The buyer has been shown the modal and the order is ready for the buyer to pay for the order with his wallet. * AWAITING_PAYMENT          - A first confirmation has been received by the blockchain network, it is waiting to have the required confirmations. * AWAITING_DELIVERY         - The payment for the product or service has already been made and the delivery of the product or service is in process. * DELIVERED_SERVICE         - The service has already been delivered. * AWAITING_SHIPMENT         - The guide for the products has already been uploaded and the shipment is in process. * SHIPPED                   - The product or service has been shipped. * SHIPMENT_ERROR            - There was a problem in the shipping process. * AWAITING_SHOPPER_APPROVAL - Waiting for approval from the buyer to confirm that they have received the product or service. * DISPUTED                  - The buyer has started a dispute process with the merchant. * PENDING_SHOPPER_RETURN    - The merchant is waiting for the buyer to return the product, as a result of the dispute. * REFUNDED                  - The product or service has been refunded to the buyer. * COMPLETED                 - The buyer confirms the receipt of the product or service satisfactorily and the exchange of the value of the sale to stable currency has been made only if applicable. * SETTLED                   - The merchant transaction has been settled.
    */
    'status': Order.StatusEnum;
    /**
    * Date and time when Zenkipay received the request to create the order, in milliseconds and UTC format.  The Unix epoch (or Unix time or POSIX time or Unix timestamp) is the number of seconds elapsed since January 1, 1970 (midnight UTC/GMT), not counting leap seconds (in ISO 8601: 1970-01-01T00: 00:00Z)
    */
    'createdAt': number;
    'shopper'?: Shopper | null;
    'breakdown': Breakdown;
    'paymentInfo'?: OrderPaymentInfo | null;
    'settlementInfo'?: OrderSettlementInfo | null;
    /**
    * Set of products or services considered within the shopping cart.
    */
    'items': Array<Item>;
    /**
    * Complementary order information that the merchant requires to send and inform Zenkipay.
    */
    'metadata'?: { [key: string]: string; } | null;
    'dispute'?: OrderDispute;
    'claim'?: OrderClaim;
    'links'?: OrderLinks | null;
    /**
    * Signature of the payment order information to display the modal.
    */
    'paymentSignature'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "version",
            "baseName": "version",
            "type": "string"
        },
        {
            "name": "zenkiOrderId",
            "baseName": "zenkiOrderId",
            "type": "string"
        },
        {
            "name": "orderId",
            "baseName": "orderId",
            "type": "string"
        },
        {
            "name": "cartId",
            "baseName": "cartId",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "Order.TypeEnum"
        },
        {
            "name": "countryCodeIso2",
            "baseName": "countryCodeIso2",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "Order.StatusEnum"
        },
        {
            "name": "createdAt",
            "baseName": "createdAt",
            "type": "number"
        },
        {
            "name": "shopper",
            "baseName": "shopper",
            "type": "Shopper"
        },
        {
            "name": "breakdown",
            "baseName": "breakdown",
            "type": "Breakdown"
        },
        {
            "name": "paymentInfo",
            "baseName": "paymentInfo",
            "type": "OrderPaymentInfo"
        },
        {
            "name": "settlementInfo",
            "baseName": "settlementInfo",
            "type": "OrderSettlementInfo"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<Item>"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "dispute",
            "baseName": "dispute",
            "type": "OrderDispute"
        },
        {
            "name": "claim",
            "baseName": "claim",
            "type": "OrderClaim"
        },
        {
            "name": "links",
            "baseName": "_links",
            "type": "OrderLinks"
        },
        {
            "name": "paymentSignature",
            "baseName": "paymentSignature",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return Order.attributeTypeMap;
    }
}

export namespace Order {
    export enum TypeEnum {
        WithCarrier = <any> 'WITH_CARRIER',
        WithoutCarrier = <any> 'WITHOUT_CARRIER',
        Mixed = <any> 'MIXED'
    }
    export enum StatusEnum {
        Pending = <any> 'PENDING',
        Ready4Pay = <any> 'READY4PAY',
        AwaitingPayment = <any> 'AWAITING_PAYMENT',
        AwaitingDelivery = <any> 'AWAITING_DELIVERY',
        DeliveredService = <any> 'DELIVERED_SERVICE',
        AwaitingShipment = <any> 'AWAITING_SHIPMENT',
        Shipped = <any> 'SHIPPED',
        ShipmentError = <any> 'SHIPMENT_ERROR',
        AwaitingShopperApproval = <any> 'AWAITING_SHOPPER_APPROVAL',
        Disputed = <any> 'DISPUTED',
        PendingShopperReturn = <any> 'PENDING_SHOPPER_RETURN',
        Refunded = <any> 'REFUNDED',
        Completed = <any> 'COMPLETED',
        Settled = <any> 'SETTLED'
    }
}
