/**
 * Zenkipay API
 * Definition of technical specification of the product; Zenkipay is a gateway cryptocurrency payment system that allows merchant\'s to receive payments on their e-commerce portals. Unlike other platforms, Zenkipay ensures customer satisfaction through its payment process. guarantee deposit (delivered product and expected quality) to settle payment to the merchant, thus avoiding the loss of client assets due to online scams.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@zenki.fi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

/**
* Summary of shopping cart amounts.
*/
export class Breakdown {
    /**
    * Unique code of the currency of the country, the definition of the ISO 4217 standard is used with 3 characters, see: https://es.wikipedia.org/wiki/ISO_4217 or https://www.iso.org/iso-4217-currency-codes.html.
    */
    'currencyCodeIso3': string;
    /**
    * Sum of the total cost of the items (quantity * unitPrice).
    */
    'totalItemsAmount': number;
    /**
    * Shipping cost, in case of not applying its value must be 0.
    */
    'shipmentAmount': number;
    /**
    * Sum of total_items_amount plus shipment_amount.
    */
    'subtotalAmount': number;
    /**
    * Taxes, if not applied, its value must be 0.
    */
    'taxesAmount': number;
    /**
    * Local taxes, if not applied, its value must be 0.
    */
    'localTaxesAmount'?: number | null;
    /**
    * Import costs, if not applied, its value must be 0.
    */
    'importCosts'?: number | null;
    /**
    * Discount of your merchant, in case of not applying its value must be 0.
    */
    'discountAmount'?: number | null;
    /**
    * Additional charges, consists of a key/value object that comprises the description of the charge/amount respectively.
    */
    'additionalCharges'?: { [key: string]: string; } | null;
    /**
    * Sum of subtotalAmount, taxesAmount, localTaxesAmount, importCosts, and each value of additionalCharges minus discountAmount.
    */
    'grandTotalAmount': number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "currencyCodeIso3",
            "baseName": "currencyCodeIso3",
            "type": "string"
        },
        {
            "name": "totalItemsAmount",
            "baseName": "totalItemsAmount",
            "type": "number"
        },
        {
            "name": "shipmentAmount",
            "baseName": "shipmentAmount",
            "type": "number"
        },
        {
            "name": "subtotalAmount",
            "baseName": "subtotalAmount",
            "type": "number"
        },
        {
            "name": "taxesAmount",
            "baseName": "taxesAmount",
            "type": "number"
        },
        {
            "name": "localTaxesAmount",
            "baseName": "localTaxes_amount",
            "type": "number"
        },
        {
            "name": "importCosts",
            "baseName": "importCosts",
            "type": "number"
        },
        {
            "name": "discountAmount",
            "baseName": "discountAmount",
            "type": "number"
        },
        {
            "name": "additionalCharges",
            "baseName": "additionalCharges",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "grandTotalAmount",
            "baseName": "grandTotalAmount",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return Breakdown.attributeTypeMap;
    }
}

