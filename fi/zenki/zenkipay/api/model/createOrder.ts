/**
 * Zenkipay API
 * Definition of technical specification of the product; Zenkipay is a gateway cryptocurrency payment system that allows merchant\'s to receive payments on their e-commerce portals. Unlike other platforms, Zenkipay ensures customer satisfaction through its payment process. guarantee deposit (delivered product and expected quality) to settle payment to the merchant, thus avoiding the loss of client assets due to online scams.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@zenki.fi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { Breakdown } from './breakdown';
import { Item } from './item';
import { Shopper } from './shopper';

/**
* Object used with the information required to create an order.
*/
export class CreateOrder {
    /**
    * Data model version, its current value should be v1.0.0.
    */
    'version': string;
    /**
    * Unique order identifier generated by the merchant. In order to have correct traceability and adequate conversion metrics, it is required to send the OrderId field or the CardId Field.
    */
    'orderId'?: string | null;
    /**
    * Unique identifier of the shopping cart that allows identifying the purchase of one or more products or services. In order to have correct traceability and adequate conversion metrics, it is required to send the OrderId field or the CardId Field.
    */
    'cartId'?: string | null;
    /**
    * Indicates the model for the product delivery or service delivery.  Possible values: * WITH_CARRIER    - If a courier is going to be used for the shipment and delivery of the product or service. * WITHOUT_CARRIER - If a courier is not going to be used for the shipment and delivery of the product or service. * MIXED           - If a courier is going to be used to send part of the products or services and another part is delivered without using a courier.
    */
    'type': CreateOrder.TypeEnum;
    /**
    * Unique country identifier, the definition of the ISO_3166-1 standard is used with 2 characters, see:https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 or https://www.iso.org/iso-3166-country-codes.html
    */
    'countryCodeIso2': string;
    'shopper'?: Shopper | null;
    'breakdown': Breakdown;
    /**
    * Set of products or services considered within the shopping cart.
    */
    'items': Array<Item>;
    /**
    * Complementary information of the order that the merchant requires to send and inform Zenkipay.
    */
    'metadata'?: { [key: string]: string; } | null;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "version",
            "baseName": "version",
            "type": "string"
        },
        {
            "name": "orderId",
            "baseName": "orderId",
            "type": "string"
        },
        {
            "name": "cartId",
            "baseName": "cartId",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "CreateOrder.TypeEnum"
        },
        {
            "name": "countryCodeIso2",
            "baseName": "countryCodeIso2",
            "type": "string"
        },
        {
            "name": "shopper",
            "baseName": "shopper",
            "type": "Shopper"
        },
        {
            "name": "breakdown",
            "baseName": "breakdown",
            "type": "Breakdown"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<Item>"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "{ [key: string]: string; }"
        }    ];

    static getAttributeTypeMap() {
        return CreateOrder.attributeTypeMap;
    }
}

export namespace CreateOrder {
    export enum TypeEnum {
        WithCarrier = <any> 'WITH_CARRIER',
        WithoutCarrier = <any> 'WITHOUT_CARRIER',
        Mixed = <any> 'MIXED'
    }
}
